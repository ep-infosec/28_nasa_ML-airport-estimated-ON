"""Pipeline for data engineering
"""

import os
from kedro.pipeline import Pipeline, node, pipeline
from .nodes import *

from data_services.swim_based_eta import build_swim_eta


def create_pipelines(**kwargs):

    all_initial_pipeline = Pipeline(
        [
            node(
                func=df_min_per_gufi,
                inputs=['first_position_data_set@CSV'],
                outputs='first_position_per_gufi_df',
                name='df_min_per_gufi_first_position',
            ),
            node(
                func=prepare_aircraft_class_map,
                inputs='aircrafts_classes_map@CSV',
                outputs='aircraft_categories',
                name='prepare_aircraft_class_map',
            ),
            node(
                func=save_aircraft_categories,
                inputs='aircraft_categories',
                outputs=None,
                name='save_aircraft_categories',
            ),
        ],
        tags='de',
    )

    ntv_pipeline = Pipeline(
        [
            node(
                func=set_index,
                inputs='first_position_per_gufi_df',
                outputs='first_position_df',
                name='set_index_first_position',
            ),
            node(
                func=set_index,
                inputs='MFS_data_set@CSV',
                outputs='MFS_df_0',
                name='set_index_MFS',
            ),
            node(
                func=de_dup,
                inputs='MFS_df_0',
                outputs='MFS_df',
                name='de_dup_MFS',
            ),
            node(
                func=set_index,
                inputs='runways_data_set@CSV',
                outputs='runways_df',
                name='set_index_runways',
            ),
            node(
                func=set_index,
                inputs='landing_position_data_set@CSV',
                outputs='landing_position_df',
                name='set_index_landing_position',
            ),
            node(
                func=add_col_name_suffix,
                inputs=[
                    'landing_position_df',
                    'params:suffix.landing_position',
                ],
                outputs='landing_position_renamed_df',
                name='add_landing_position_col_name_suffix',
            ),
            node(
                func=df_join,
                inputs=[
                    'MFS_df',
                    'runways_df',
                    'params:df_join_kwargs.MFS_df.runways_df',
                ],
                outputs='ntv_df_0',
                name='df_join_runways_onto_MFS',
            ),
            node(
                func=drop_gufis_no_points_on_runway,
                inputs='ntv_df_0',
                outputs='ntv_df_1',
                name='drop_gufis_no_points_on_runway',
            ),
            node(
                func=drop_gufis_actual_arrival_time_difference,
                inputs=[
                    'ntv_df_1',
                    'params:max_arrival_time_difference_seconds',
                ],
                outputs='ntv_df_2',
                name='drop_gufis_actual_arrival_time_difference',
            ),
            node(
                func=df_join,
                inputs=[
                    'ntv_df_2',
                    'first_position_df',
                ],
                outputs='ntv_df_3',
                name='df_join_first_position',
            ),
            node(
                func=df_join,
                inputs=[
                    'ntv_df_3',
                    'landing_position_renamed_df',
                ],
                outputs='ntv_df_4',
                name='df_join_landing_position',
            ),
            node(
                func=filter_rows_missing_columns,
                inputs='ntv_df_4',
                outputs='ntv_df_5',
                name='filter_rows_missing_arrival_runway_actual_time_via_surveillance',
            ),
            node(
                func=drop_gufis_at_landing_time_difference,
                inputs=[
                    'ntv_df_5',
                    'params:max_at_landing_time_difference_seconds',
                ],
                outputs='ntv_df_6',
                name='drop_gufis_at_landing_time_difference',
            ),
            node(
                func=drop_cols_not_in_inputs,
                inputs=[
                    'ntv_df_6',
                    'params:inputs',
                    'params:inputs_train_only',
                ],
                outputs='ntv_df_7',
                name='drop_cols_not_in_inputs_ntv_df',
            ),
            node(
                func=drop_timestamp_col,
                inputs='ntv_df_7',
                outputs='ntv_df_8',
                name='drop_timestamp_col_ntv_df',
            ),
            node(
                func=de_dup_index,
                inputs=[
                    'ntv_df_8',
                    'params:drop_duplicated_index_kwargs.ntv_df'
                ],
                outputs='ntv_df_9',
                name='de_dup_index_ntv_df',
            ),
            node(
                func=add_train_test_group_per_date,
                inputs=[
                    'ntv_df_9',
                    'parameters',
                ],
                outputs='ntv_df',
                name='add_train_test_group_per_date_to_ntv_df',
            ),
            node(
                func=log_df_size,
                inputs='ntv_df',
                outputs=None,
                name='log_df_size_ntv_df',
            ),
        ],
        tags='de',
    )

    tv_pipeline = Pipeline(
        [
            node(
                func=df_passback,
                inputs='TBFM_data_set@CSV',
                outputs='TBFM_df',
                name='df_passback_TBFM',
            ),
            node(
                func=build_swim_eta,
                inputs=[
                    'MF_TFM_data_set@CSV',
                    'TBFM_df',
                    'first_position_per_gufi_df',
                ],
                outputs='best_swim_eta_df',
                name='build_swim_eta',
            ),
            node(
                func=log_df_size,
                inputs='best_swim_eta_df',
                outputs=None,
                name='log_df_size_best_swim_eta_df',
            ),
            node(
                func=add_col_name_suffix,
                inputs=[
                    'TBFM_df',
                    'params:suffix.TBFM',
                ],
                outputs='TBFM_renamed_df',
                name='add_TBFM_col_name_suffix',
            ),
            node(
                func=start_tv_df,
                inputs=[
                    'ntv_df',
                    'params:tv_timestep',
                ],
                outputs='tv_df_0',
                name='start_tv_df',
            ),
            node(
                func=select_tv_train_samples,
                inputs=[
                    'tv_df_0',
                    'params:tv_timestep_fraction_train',
                    'params:random_seed',
                    'params:tv_keep_non_train_timesteps',
                ],
                outputs='tv_df_1',
                name='select_train_samples',
            ),
            node(
                func=log_df_size,
                inputs='tv_df_1',
                outputs=None,
                name='log_df_size_tv_df_1',
            ),
            node(
                func=sort_timestamp_merge_asof,
                inputs=[
                    'tv_df_1',
                    'TBFM_renamed_df',
                ],
                outputs='tv_df_2',
                name='merge_asof_TBFM_onto_tv_df',
            ),
            node(
                func=sort_timestamp_merge_asof,
                inputs=[
                    'tv_df_2',
                    'best_swim_eta_df',
                ],
                outputs='tv_df_3',
                name='merge_asof_best_swim_eta_df_onto_tv_df',
            ),
            node(
                func=sort_timestamp_merge_asof,
                inputs=[
                    'tv_df_3',
                    'TFM_track_data_set@CSV',
                ],
                outputs='tv_df_4',
                name='merge_asof_TFM_track_onto_tv_df',
            ),
            node(
                func=drop_cols_not_in_inputs,
                inputs=[
                    'tv_df_4',
                    'params:inputs',
                ],
                outputs='tv_df_5',
                name='drop_cols_tv_df',
            ),
            node(
                func=sort_by_and_create_multiindex,
                inputs='tv_df_5',
                outputs='tv_df_6',
                name='sort_by_and_create_multiindex_tv_df',
            ),
            node(
                func=merge_asof_arr_rwy_data_engred,
                inputs=[
                    'tv_df_6',
                    'arr_rwy_de_data_set@CSV',
                    'params:globals',
                    'params:merge_asof_tolerance',
                ],
                outputs='tv_df_7',
                name='merge_asof_arr_rwy_data_engred',
            ),
            node(
                func=log_df_size,
                inputs='tv_df_7',
                outputs=None,
                name='log_df_size_after_merge_asof_arr_rwy',
            ),
            node(
                func=load_and_predict_w_arr_rwy_model,
                inputs=[
                    'tv_df_7',
                    'params:mlflow',
                    'params:globals.arr_rwy_model_uri',
                ],
                outputs='tv_df_8',
                name='load_predict_w_arr_rwy_model',
            ),
            node(
                func=add_empty_num_arrival_runway_best_time,
                inputs=[
                    'tv_df_8',
                    'params:inputs',
                ],
                outputs='tv_df',
                name='add_empty_num_arrival_runway_best_time',
            ),
            node(
                func=log_df_size,
                inputs='tv_df',
                outputs=None,
                name='log_df_size_tv_df',
            ),
        ],
        tags='de',
    )

    final_pipeline = Pipeline(
        [
            node(
                func=df_join,
                inputs=[
                    'tv_df',
                    'ntv_df',
                    'params:df_join_kwargs.tv_df.ntv_df',
                ],
                outputs='tv_ntv_df',
                name='df_join_ntv_onto_tv',
            ),
            node(
                func=filter_times_before_time_first_tracked,
                inputs='tv_ntv_df',
                outputs='tv_ntv_df_filtered',
                name='filter_times_before_time_first_tracked',
            ),
            node(
                func=compute_seconds_to_arrival_runway_actual_time,
                inputs='tv_ntv_df_filtered',
                outputs='data_engred_0',
                name='compute_target',
            ),
            node(
                func=dropna_col,
                inputs=[
                    'data_engred_0',
                    'params:target.name',
                ],
                outputs='data_engred',
                name='dropna_col_target',
            ),
            node(
                func=log_df_size,
                inputs='data_engred',
                outputs=None,
                name='log_df_size_data_engred',
            ),
            node(
                func=de_save,
                inputs=[
                    'data_engred',
                    'params:globals',
                ],
                outputs=None,
                name='de_save',
            ),
        ],
        tags='de',
    )

    return {
        'de_ntv': all_initial_pipeline + ntv_pipeline,
        'de_tv': all_initial_pipeline + ntv_pipeline + tv_pipeline,
        'de_overall': (
            all_initial_pipeline + ntv_pipeline + tv_pipeline + final_pipeline
        ),
    }
